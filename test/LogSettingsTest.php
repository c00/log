<?php

namespace test;

use c00\log\channel\onScreen\OnScreenSettings;
use c00\log\channel\sql\LogChannelSQL;
use c00\log\channel\sql\SqlAbstractChannelSettings;
use c00\log\channel\stdError\StdErrorSettings;
use c00\log\Log;
use c00\log\LogSettings;
use PHPUnit\Framework\TestCase;

class LogSettingsTest extends TestCase
{
    public $key = "test-settings";
	public $tmpDir = '';

    public function setUp() {
	    parent::setUp(); // TODO: Change the autogenerated stub
	    $this->tmpDir = sys_get_temp_dir() . '/';
    }

	public function tearDown()
    {
        //Delete temp files.
        $file = $this->tmpDir . $this->key . '.json';
        if (file_exists($file)) unlink($file);

        parent::tearDown();
    }

	/**
	 * @throws \c00\log\LogException
	 */
    public function testDefaultChannels() {
    	$s = LogSettings::new(true);
    	$os = $s->getChannelSettings(OnScreenSettings::class);
	    $std = $s->getChannelSettings(StdErrorSettings::class);

	    $this->assertEquals(OnScreenSettings::class, get_class($os));
	    $this->assertEquals(StdErrorSettings::class, get_class($std));

		$this->assertEquals($os->level, Log::EXTRA_DEBUG);
	    $this->assertEquals($std->level, Log::ERROR);
    }

	/**
	 * @throws \c00\log\LogException
	 */
    public function testManualChannels() {
	    $s = LogSettings::new(false);

	    $s->addChannelSettings(StdErrorSettings::new(Log::WARNING));
	    $s->addChannelSettings(OnScreenSettings::new(Log::INFO));

	    $os = $s->getChannelSettings(OnScreenSettings::class);
	    $std = $s->getChannelSettings(StdErrorSettings::class);

	    $this->assertEquals(OnScreenSettings::class, get_class($os));
	    $this->assertEquals(StdErrorSettings::class, get_class($std));

	    $this->assertEquals($os->level, Log::INFO);
	    $this->assertEquals($std->level, Log::WARNING);
    }

	/**
	 * @throws \c00\log\LogException
	 * @throws \Exception
	 */
    public function testSaving(){
        $settings = new LogSettings($this->key, $this->tmpDir);
        $settings->defaultLevel = Log::DEBUG;

	    $settings->addChannelSettings(StdErrorSettings::new(Log::WARNING));
	    $settings->addChannelSettings(OnScreenSettings::new(Log::INFO));

        $settings->save();

        $this->assertTrue(file_exists($this->tmpDir.$this->key . '.json'));

        $loaded = new LogSettings($this->key, $this->tmpDir);
        $loaded->load();

        $this->assertEquals($settings->defaultLevel, $loaded->defaultLevel);

	    $os = $loaded->getChannelSettings(OnScreenSettings::class);
	    $std = $loaded->getChannelSettings(StdErrorSettings::class);

	    $this->assertEquals(OnScreenSettings::class, get_class($os));
	    $this->assertEquals(StdErrorSettings::class, get_class($std));

	    $this->assertEquals($os->level, Log::INFO);
	    $this->assertEquals($std->level, Log::WARNING);
    }

    public function testSqlChannel(){
        $database = "test_log";
        $username = "root";
        $password = "foo";
        $host = "localhost";

        $settings = new LogSettings($this->key, $this->tmpDir);
        $settings->loadDefaults();
        $settings->addSqlChannelSettings($database, $username, $password, $host);
        $settings->save();

        $this->assertTrue(file_exists($this->tmpDir.$this->key . '.json'));

        $loaded = new LogSettings($this->key, $this->tmpDir);
        $loaded->load();

        /** @var SqlAbstractChannelSettings $loadedSqlChannelSettings */
        $loadedSqlChannelSettings = $loaded->getChannelSettings(LogChannelSQL::class);
        $this->assertEquals(SqlAbstractChannelSettings::class, get_class($loadedSqlChannelSettings));
        $this->assertEquals("foo", $loadedSqlChannelSettings->password);

    }

    public function testSqlShorthand(){
        $database = "test_log";
        $username = "coo";
        $password = "123";
        $host = "127.0.0.1";

        $settings = LogSettings::new()
            ->addSqlChannelSettings($host, $username, $password, $database);

        Log::init($settings);

        //Assert that we didn't fail
	    $this->assertTrue(true);
    }

}